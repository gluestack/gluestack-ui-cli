diff --git a/node_modules/react-native-web/dist/cjs/exports/AppRegistry/renderApplication.js b/node_modules/react-native-web/dist/cjs/exports/AppRegistry/renderApplication.js
index 0c0cb2f..ccaa88f 100644
--- a/node_modules/react-native-web/dist/cjs/exports/AppRegistry/renderApplication.js
+++ b/node_modules/react-native-web/dist/cjs/exports/AppRegistry/renderApplication.js
@@ -24,9 +24,8 @@ var _react = _interopRequireDefault(require("react"));
 function renderApplication(RootComponent, WrapperComponent, callback, options) {
   var shouldHydrate = options.hydrate,
     initialProps = options.initialProps,
-    mode = options.mode,
     rootTag = options.rootTag;
-  var renderFn = shouldHydrate ? mode === 'concurrent' ? _render.hydrate : _render.hydrateLegacy : mode === 'concurrent' ? _render.render : _render.default;
+  var renderFn = shouldHydrate ? _render.hydrate : _render.default;
   (0, _invariant.default)(rootTag, 'Expect to have a valid rootTag, instead got ', rootTag);
   return renderFn(/*#__PURE__*/_react.default.createElement(_AppContainer.default, {
     WrapperComponent: WrapperComponent,
diff --git a/node_modules/react-native-web/dist/cjs/exports/findNodeHandle/index.js b/node_modules/react-native-web/dist/cjs/exports/findNodeHandle/index.js
deleted file mode 100644
index 73f254c..0000000
--- a/node_modules/react-native-web/dist/cjs/exports/findNodeHandle/index.js
+++ /dev/null
@@ -1,28 +0,0 @@
-"use strict";
-
-exports.__esModule = true;
-exports.default = void 0;
-var _reactDom = require("react-dom");
-/**
- * Copyright (c) Nicolas Gallagher.
- * Copyright (c) Meta Platforms, Inc. and affiliates.
- *
- * This source code is licensed under the MIT license found in the
- * LICENSE file in the root directory of this source tree.
- *
- * 
- */
-
-/**
- * @deprecated imperatively finding the DOM element of a react component has been deprecated in React 18.
- * You should use ref properties on the component instead.
- */
-var findNodeHandle = component => {
-  var node;
-  try {
-    node = (0, _reactDom.findDOMNode)(component);
-  } catch (e) {}
-  return node;
-};
-var _default = exports.default = findNodeHandle;
-module.exports = exports.default;
\ No newline at end of file
diff --git a/node_modules/react-native-web/dist/cjs/exports/render/index.js b/node_modules/react-native-web/dist/cjs/exports/render/index.js
index b41ee11..18d9b2f 100644
--- a/node_modules/react-native-web/dist/cjs/exports/render/index.js
+++ b/node_modules/react-native-web/dist/cjs/exports/render/index.js
@@ -10,15 +10,10 @@
 
 'use client';
 
-var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault").default;
 exports.__esModule = true;
-exports.default = renderLegacy;
+exports.default = render;
 exports.hydrate = hydrate;
-exports.hydrateLegacy = hydrateLegacy;
-exports.render = render;
-var _reactDom = require("react-dom");
 var _client = require("react-dom/client");
-var _unmountComponentAtNode = _interopRequireDefault(require("../unmountComponentAtNode"));
 var _dom = require("../StyleSheet/dom");
 function hydrate(element, root) {
   (0, _dom.createSheet)(root);
@@ -30,21 +25,3 @@ function render(element, root) {
   reactRoot.render(element);
   return reactRoot;
 }
\ No newline at end of file
-function hydrateLegacy(element, root, callback) {
-  (0, _dom.createSheet)(root);
-  (0, _reactDom.hydrate)(element, root, callback);
-  return {
-    unmount: function unmount() {
-      return (0, _unmountComponentAtNode.default)(root);
-    }
-  };
-}
-function renderLegacy(element, root, callback) {
-  (0, _dom.createSheet)(root);
-  (0, _reactDom.render)(element, root, callback);
-  return {
-    unmount: function unmount() {
-      return (0, _unmountComponentAtNode.default)(root);
-    }
-  };
-}
\ No newline at end of file
diff --git a/node_modules/react-native-web/dist/cjs/exports/unmountComponentAtNode/index.js b/node_modules/react-native-web/dist/cjs/exports/unmountComponentAtNode/index.js
index 3ea3964..e740204 100644
--- a/node_modules/react-native-web/dist/cjs/exports/unmountComponentAtNode/index.js
+++ b/node_modules/react-native-web/dist/cjs/exports/unmountComponentAtNode/index.js
@@ -1,8 +1,7 @@
 "use strict";
 
 exports.__esModule = true;
-exports.default = void 0;
-var _reactDom = require("react-dom");
+exports.default = unmountComponentAtNode;
 /**
  * Copyright (c) Nicolas Gallagher.
  *
@@ -11,5 +10,9 @@ var _reactDom = require("react-dom");
  *
  * 
  */
-var _default = exports.default = _reactDom.unmountComponentAtNode;
+
+function unmountComponentAtNode(rootTag) {
+  rootTag.unmount();
+  return true;
+}
 module.exports = exports.default;
\ No newline at end of file
diff --git a/node_modules/react-native-web/dist/cjs/index.js b/node_modules/react-native-web/dist/cjs/index.js
index b696270..1500876 100644
--- a/node_modules/react-native-web/dist/cjs/index.js
+++ b/node_modules/react-native-web/dist/cjs/index.js
@@ -2,11 +2,9 @@
 
 var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault").default;
 exports.__esModule = true;
-exports.useWindowDimensions = exports.useLocaleContext = exports.useColorScheme = exports.unstable_createElement = exports.unmountComponentAtNode = exports.render = exports.processColor = exports.findNodeHandle = exports.YellowBox = exports.VirtualizedList = exports.View = exports.Vibration = exports.UIManager = exports.TouchableWithoutFeedback = exports.TouchableOpacity = exports.TouchableNativeFeedback = exports.TouchableHighlight = exports.Touchable = exports.TextInput = exports.Text = exports.Switch = exports.StyleSheet = exports.StatusBar = exports.Share = exports.SectionList = exports.ScrollView = exports.SafeAreaView = exports.RefreshControl = exports.ProgressBar = exports.Pressable = exports.Platform = exports.PixelRatio = exports.Picker = exports.PanResponder = exports.NativeModules = exports.NativeEventEmitter = exports.Modal = exports.LogBox = exports.Linking = exports.LayoutAnimation = exports.KeyboardAvoidingView = exports.Keyboard = exports.InteractionManager = exports.ImageBackground = exports.Image = exports.I18nManager = exports.FlatList = exports.Easing = exports.Dimensions = exports.DeviceEventEmitter = exports.Clipboard = exports.CheckBox = exports.Button = exports.BackHandler = exports.Appearance = exports.AppState = exports.AppRegistry = exports.Animated = exports.Alert = exports.ActivityIndicator = exports.AccessibilityInfo = void 0;
+exports.useWindowDimensions = exports.useLocaleContext = exports.useColorScheme = exports.unstable_createElement = exports.unmountComponentAtNode = exports.render = exports.processColor = exports.YellowBox = exports.VirtualizedList = exports.View = exports.Vibration = exports.UIManager = exports.TouchableWithoutFeedback = exports.TouchableOpacity = exports.TouchableNativeFeedback = exports.TouchableHighlight = exports.Touchable = exports.TextInput = exports.Text = exports.Switch = exports.StyleSheet = exports.StatusBar = exports.Share = exports.SectionList = exports.ScrollView = exports.SafeAreaView = exports.RefreshControl = exports.ProgressBar = exports.Pressable = exports.Platform = exports.PixelRatio = exports.Picker = exports.PanResponder = exports.NativeModules = exports.NativeEventEmitter = exports.Modal = exports.LogBox = exports.Linking = exports.LayoutAnimation = exports.KeyboardAvoidingView = exports.Keyboard = exports.InteractionManager = exports.ImageBackground = exports.Image = exports.I18nManager = exports.FlatList = exports.Easing = exports.Dimensions = exports.DeviceEventEmitter = exports.Clipboard = exports.CheckBox = exports.Button = exports.BackHandler = exports.Appearance = exports.AppState = exports.AppRegistry = exports.Animated = exports.Alert = exports.ActivityIndicator = exports.AccessibilityInfo = void 0;
 var _createElement = _interopRequireDefault(require("./exports/createElement"));
 exports.unstable_createElement = _createElement.default;
-var _findNodeHandle = _interopRequireDefault(require("./exports/findNodeHandle"));
-exports.findNodeHandle = _findNodeHandle.default;
 var _processColor = _interopRequireDefault(require("./exports/processColor"));
 exports.processColor = _processColor.default;
 var _render = _interopRequireDefault(require("./exports/render"));
diff --git a/node_modules/react-native-web/dist/cjs/vendor/react-native/VirtualizedList/index.js b/node_modules/react-native-web/dist/cjs/vendor/react-native/VirtualizedList/index.js
index f9df024..4e07bc5 100644
--- a/node_modules/react-native-web/dist/cjs/vendor/react-native/VirtualizedList/index.js
+++ b/node_modules/react-native-web/dist/cjs/vendor/react-native/VirtualizedList/index.js
@@ -11,7 +11,6 @@ var _RefreshControl = _interopRequireDefault(require("../../../exports/RefreshCo
 var _ScrollView = _interopRequireDefault(require("../../../exports/ScrollView"));
 var _View = _interopRequireDefault(require("../../../exports/View"));
 var _StyleSheet = _interopRequireDefault(require("../../../exports/StyleSheet"));
-var _findNodeHandle = _interopRequireDefault(require("../../../exports/findNodeHandle"));
 var _Batchinator = _interopRequireDefault(require("../Batchinator"));
 var _clamp = _interopRequireDefault(require("../Utilities/clamp"));
 var _infoLog = _interopRequireDefault(require("../infoLog"));
@@ -588,9 +587,7 @@ class VirtualizedList extends _StateSafePureComponent.default {
         };
       });
     };
-    this._createViewToken = (index, isViewable, props
-    // $FlowFixMe[missing-local-annot]
-    ) => {
+    this._createViewToken = (index, isViewable, props) => {
       var data = props.data,
         getItem = props.getItem;
       var item = getItem(data, index);
@@ -988,9 +985,7 @@ class VirtualizedList extends _StateSafePureComponent.default {
     var nestedContext = this.context;
     return !!(nestedContext && !!nestedContext.horizontal === horizontalOrDefault(this.props.horizontal));
   }
-  _keyExtractor(item, index, props
-  // $FlowFixMe[missing-local-annot]
-  ) {
+  _keyExtractor(item, index, props) {
     if (props.keyExtractor != null) {
       return props.keyExtractor(item, index);
     }
diff --git a/node_modules/react-native-web/dist/exports/AppRegistry/renderApplication.js b/node_modules/react-native-web/dist/exports/AppRegistry/renderApplication.js
index b53dff6..136577d 100644
--- a/node_modules/react-native-web/dist/exports/AppRegistry/renderApplication.js
+++ b/node_modules/react-native-web/dist/exports/AppRegistry/renderApplication.js
@@ -11,15 +11,14 @@ import _extends from "@babel/runtime/helpers/extends";
 
 import AppContainer from './AppContainer';
 import invariant from 'fbjs/lib/invariant';
-import renderLegacy, { hydrateLegacy, render, hydrate } from '../render';
+import render, { hydrate } from '../render';
 import StyleSheet from '../StyleSheet';
 import React from 'react';
 export default function renderApplication(RootComponent, WrapperComponent, callback, options) {
   var shouldHydrate = options.hydrate,
     initialProps = options.initialProps,
-    mode = options.mode,
     rootTag = options.rootTag;
-  var renderFn = shouldHydrate ? mode === 'concurrent' ? hydrate : hydrateLegacy : mode === 'concurrent' ? render : renderLegacy;
+  var renderFn = shouldHydrate ? hydrate : render;
   invariant(rootTag, 'Expect to have a valid rootTag, instead got ', rootTag);
   return renderFn(/*#__PURE__*/React.createElement(AppContainer, {
     WrapperComponent: WrapperComponent,
diff --git a/node_modules/react-native-web/dist/exports/AppRegistry/renderApplication.js.flow b/node_modules/react-native-web/dist/exports/AppRegistry/renderApplication.js.flow
index b9df2af..a9a350d 100644
--- a/node_modules/react-native-web/dist/exports/AppRegistry/renderApplication.js.flow
+++ b/node_modules/react-native-web/dist/exports/AppRegistry/renderApplication.js.flow
@@ -11,7 +11,7 @@
 import type { ComponentType, Node } from 'react';
 import AppContainer from './AppContainer';
 import invariant from 'fbjs/lib/invariant';
-import renderLegacy, { hydrateLegacy, render, hydrate } from '../render';
+import render, { hydrate } from '../render';
 import StyleSheet from '../StyleSheet';
 import React from 'react';
 export type Application = {
@@ -20,7 +20,6 @@ export type Application = {
 declare export default function renderApplication<Props: Object>(RootComponent: ComponentType<Props>, WrapperComponent?: ?ComponentType<*>, callback?: () => void, options: {
   hydrate: boolean,
   initialProps: Props,
-  mode: 'concurrent' | 'legacy',
   rootTag: any,
 }): Application;
 declare export function getApplication(RootComponent: ComponentType<Object>, initialProps: Object, WrapperComponent?: ?ComponentType<*>): {|
diff --git a/node_modules/react-native-web/dist/exports/findNodeHandle/index.js b/node_modules/react-native-web/dist/exports/findNodeHandle/index.js
deleted file mode 100644
index e997fcf..0000000
--- a/node_modules/react-native-web/dist/exports/findNodeHandle/index.js
+++ /dev/null
@@ -1,24 +0,0 @@
-/**
- * Copyright (c) Nicolas Gallagher.
- * Copyright (c) Meta Platforms, Inc. and affiliates.
- *
- * This source code is licensed under the MIT license found in the
- * LICENSE file in the root directory of this source tree.
- *
- * 
- */
-
-import { findDOMNode } from 'react-dom';
-
-/**
- * @deprecated imperatively finding the DOM element of a react component has been deprecated in React 18.
- * You should use ref properties on the component instead.
- */
-var findNodeHandle = component => {
-  var node;
-  try {
-    node = findDOMNode(component);
-  } catch (e) {}
-  return node;
-};
-export default findNodeHandle;
\ No newline at end of file
diff --git a/node_modules/react-native-web/dist/exports/findNodeHandle/index.js.flow b/node_modules/react-native-web/dist/exports/findNodeHandle/index.js.flow
deleted file mode 100644
index 412af49..0000000
--- a/node_modules/react-native-web/dist/exports/findNodeHandle/index.js.flow
+++ /dev/null
@@ -1,18 +0,0 @@
-/**
- * Copyright (c) Nicolas Gallagher.
- * Copyright (c) Meta Platforms, Inc. and affiliates.
- *
- * This source code is licensed under the MIT license found in the
- * LICENSE file in the root directory of this source tree.
- *
- * @noflow
- */
-
-import { findDOMNode } from 'react-dom';
-
-/**
- * @deprecated imperatively finding the DOM element of a react component has been deprecated in React 18.
- * You should use ref properties on the component instead.
- */
-declare var findNodeHandle: (component: any) => any;
-export default findNodeHandle;
\ No newline at end of file
diff --git a/node_modules/react-native-web/dist/exports/render/index.js b/node_modules/react-native-web/dist/exports/render/index.js
index aa91a2a..8f9a14d 100644
--- a/node_modules/react-native-web/dist/exports/render/index.js
+++ b/node_modules/react-native-web/dist/exports/render/index.js
@@ -9,35 +9,15 @@
 
 'use client';
 
-import { hydrate as domLegacyHydrate, render as domLegacyRender } from 'react-dom';
 import { createRoot as domCreateRoot, hydrateRoot as domHydrateRoot } from 'react-dom/client';
-import unmountComponentAtNode from '../unmountComponentAtNode';
 import { createSheet } from '../StyleSheet/dom';
 export function hydrate(element, root) {
   createSheet(root);
   return domHydrateRoot(root, element);
 }
-export function render(element, root) {
+export default function render(element, root) {
   createSheet(root);
   var reactRoot = domCreateRoot(root);
   reactRoot.render(element);
   return reactRoot;
 }
\ No newline at end of file
-export function hydrateLegacy(element, root, callback) {
-  createSheet(root);
-  domLegacyHydrate(element, root, callback);
-  return {
-    unmount: function unmount() {
-      return unmountComponentAtNode(root);
-    }
-  };
-}
-export default function renderLegacy(element, root, callback) {
-  createSheet(root);
-  domLegacyRender(element, root, callback);
-  return {
-    unmount: function unmount() {
-      return unmountComponentAtNode(root);
-    }
-  };
-}
\ No newline at end of file
diff --git a/node_modules/react-native-web/dist/exports/render/index.js.flow b/node_modules/react-native-web/dist/exports/render/index.js.flow
index 1bd771e..729d57d 100644
--- a/node_modules/react-native-web/dist/exports/render/index.js.flow
+++ b/node_modules/react-native-web/dist/exports/render/index.js.flow
@@ -9,11 +9,7 @@
 
 'use client';
 
-import { hydrate as domLegacyHydrate, render as domLegacyRender } from 'react-dom';
 import { createRoot as domCreateRoot, hydrateRoot as domHydrateRoot } from 'react-dom/client';
-import unmountComponentAtNode from '../unmountComponentAtNode';
 import { createSheet } from '../StyleSheet/dom';
 declare export function hydrate(element: any, root: any): any;
-declare export function render(element: any, root: any): any;
-declare export function hydrateLegacy(element: any, root: any, callback: any): any;
-declare export default function renderLegacy(element: any, root: any, callback: any): any;
\ No newline at end of file
+declare export default function render(element: any, root: any): any;
\ No newline at end of file
diff --git a/node_modules/react-native-web/dist/exports/unmountComponentAtNode/index.js b/node_modules/react-native-web/dist/exports/unmountComponentAtNode/index.js
index 925051c..cea4dee 100644
--- a/node_modules/react-native-web/dist/exports/unmountComponentAtNode/index.js
+++ b/node_modules/react-native-web/dist/exports/unmountComponentAtNode/index.js
@@ -7,5 +7,7 @@
  * 
  */
 
-import { unmountComponentAtNode } from 'react-dom';
-export default unmountComponentAtNode;
\ No newline at end of file
+export default function unmountComponentAtNode(rootTag) {
+  rootTag.unmount();
+  return true;
+}
\ No newline at end of file
diff --git a/node_modules/react-native-web/dist/exports/unmountComponentAtNode/index.js.flow b/node_modules/react-native-web/dist/exports/unmountComponentAtNode/index.js.flow
index b950090..90ec151 100644
--- a/node_modules/react-native-web/dist/exports/unmountComponentAtNode/index.js.flow
+++ b/node_modules/react-native-web/dist/exports/unmountComponentAtNode/index.js.flow
@@ -6,6 +6,4 @@
  *
  * @noflow
  */
-
-import { unmountComponentAtNode } from 'react-dom';
-export default unmountComponentAtNode;
\ No newline at end of file
+declare export default function unmountComponentAtNode(rootTag: any): any;
\ No newline at end of file
diff --git a/node_modules/react-native-web/dist/index.js b/node_modules/react-native-web/dist/index.js
index 4f69987..8618c9a 100644
--- a/node_modules/react-native-web/dist/index.js
+++ b/node_modules/react-native-web/dist/index.js
@@ -1,5 +1,4 @@
 export { default as unstable_createElement } from './exports/createElement';
-export { default as findNodeHandle } from './exports/findNodeHandle';
 export { default as processColor } from './exports/processColor';
 export { default as render } from './exports/render';
 export { default as unmountComponentAtNode } from './exports/unmountComponentAtNode';
diff --git a/node_modules/react-native-web/dist/index.js.flow b/node_modules/react-native-web/dist/index.js.flow
index fec1fd6..ec675fa 100644
--- a/node_modules/react-native-web/dist/index.js.flow
+++ b/node_modules/react-native-web/dist/index.js.flow
@@ -1,6 +1,5 @@
 // @flow strict
 export { default as unstable_createElement } from './exports/createElement';
-export { default as findNodeHandle } from './exports/findNodeHandle';
 export { default as processColor } from './exports/processColor';
 export { default as render } from './exports/render';
 export { default as unmountComponentAtNode } from './exports/unmountComponentAtNode';
diff --git a/node_modules/react-native-web/dist/modules/addEventListener/__tests__/index-test.js.flow b/node_modules/react-native-web/dist/modules/addEventListener/__tests__/index-test.js.flow
new file mode 100644
index 0000000..9eb6144
--- /dev/null
+++ b/node_modules/react-native-web/dist/modules/addEventListener/__tests__/index-test.js.flow
@@ -0,0 +1,191 @@
+/**
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @flow strict-local
+ */
+
+import * as React from 'react';
+import { act, render } from '@testing-library/react';
+import { createEventTarget } from 'dom-event-testing-library';
+import { addEventListener } from '..';
+describe('addEventListener', () => {
+  describe('addEventListener()', () => {
+    test('event dispatched on target', () => {
+      const listener = jest.fn();
+      const targetRef = React.createRef();
+      declare function Component(): any;
+      render(<Component />);
+      const target = createEventTarget(targetRef.current);
+      act(() => {
+        target.click();
+      });
+      expect(listener).toBeCalledTimes(1);
+    });
+    test('event dispatched on parent', () => {
+      const listener = jest.fn();
+      const listenerCapture = jest.fn();
+      const targetRef = React.createRef();
+      const parentRef = React.createRef();
+      declare function Component(): any;
+      render(<Component />);
+      const parent = createEventTarget(parentRef.current);
+      act(() => {
+        parent.click();
+      });
+      expect(listener).toBeCalledTimes(0);
+      expect(listenerCapture).toBeCalledTimes(0);
+    });
+    test('event dispatched on child', () => {
+      const log = [];
+      const listener = jest.fn(() => {
+        log.push('bubble');
+      });
+      const listenerCapture = jest.fn(() => {
+        log.push('capture');
+      });
+      const targetRef = React.createRef();
+      const childRef = React.createRef();
+      declare function Component(): any;
+      render(<Component />);
+      const child = createEventTarget(childRef.current);
+      act(() => {
+        child.click();
+      });
+      expect(listenerCapture).toBeCalledTimes(1);
+      expect(listener).toBeCalledTimes(1);
+      expect(log).toEqual(['capture', 'bubble']);
+    });
+    test('event dispatched on text node', () => {
+      const listener = jest.fn();
+      const targetRef = React.createRef();
+      const childRef = React.createRef();
+      declare function Component(): any;
+      render(<Component />);
+      const text = createEventTarget(childRef.current.firstChild);
+      act(() => {
+        text.click();
+      });
+      expect(listener).toBeCalledTimes(1);
+    });
+    test('listener can be attached to document', () => {
+      const listener = jest.fn();
+      const targetRef = React.createRef();
+      declare function Component(arg0: any): any;
+      render(<Component target={document} />);
+      const target = createEventTarget(targetRef.current);
+      act(() => {
+        target.click();
+      });
+      expect(listener).toBeCalledTimes(1);
+    });
+    test('listener can be attached to window ', () => {
+      const listener = jest.fn();
+      const targetRef = React.createRef();
+      declare function Component(arg0: any): any;
+      render(<Component target={window} />);
+      const target = createEventTarget(targetRef.current);
+      act(() => {
+        target.click();
+      });
+      expect(listener).toBeCalledTimes(1);
+    });
+    test('custom event dispatched on target', () => {
+      const listener = jest.fn();
+      const targetRef = React.createRef();
+      declare function Component(): any;
+      render(<Component />);
+      act(() => {
+        const event = new CustomEvent('magic-event', {
+          bubbles: true
+        });
+        targetRef.current.dispatchEvent(event);
+      });
+      expect(listener).toBeCalledTimes(1);
+    });
+    test('listeners can be set on multiple targets simultaneously', () => {
+      const log = [];
+      const targetRef = React.createRef();
+      const parentRef = React.createRef();
+      const childRef = React.createRef();
+      const listener = jest.fn(e => {
+        log.push(['bubble', e.currentTarget.id]);
+      });
+      const listenerCapture = jest.fn(e => {
+        log.push(['capture', e.currentTarget.id]);
+      });
+      declare function Component(): any;
+      render(<Component />);
+      const child = createEventTarget(childRef.current);
+      act(() => {
+        child.click();
+      });
+      expect(listenerCapture).toBeCalledTimes(2);
+      expect(listener).toBeCalledTimes(2);
+      expect(log).toEqual([['capture', 'parent'], ['capture', 'target'], ['bubble', 'target'], ['bubble', 'parent']]);
+    });
+    test('listeners are specific to each event handle', () => {
+      const log = [];
+      const targetRef = React.createRef();
+      const childRef = React.createRef();
+      const listener = jest.fn(e => {
+        log.push(['bubble', 'target']);
+      });
+      const listenerAlt = jest.fn(e => {
+        log.push(['bubble', 'target-alt']);
+      });
+      const listenerCapture = jest.fn(e => {
+        log.push(['capture', 'target']);
+      });
+      const listenerCaptureAlt = jest.fn(e => {
+        log.push(['capture', 'target-alt']);
+      });
+      declare function Component(): any;
+      render(<Component />);
+      const child = createEventTarget(childRef.current);
+      act(() => {
+        child.click();
+      });
+      expect(listenerCapture).toBeCalledTimes(1);
+      expect(listenerCaptureAlt).toBeCalledTimes(1);
+      expect(listener).toBeCalledTimes(1);
+      expect(listenerAlt).toBeCalledTimes(1);
+      expect(log).toEqual([['capture', 'target'], ['capture', 'target-alt'], ['bubble', 'target'], ['bubble', 'target-alt']]);
+    });
+  });
+  describe('stopPropagation and stopImmediatePropagation', () => {
+    test('stopPropagation works as expected', () => {
+      const childListener = jest.fn(e => {
+        e.stopPropagation();
+      });
+      const targetListener = jest.fn();
+      const targetRef = React.createRef();
+      const childRef = React.createRef();
+      declare function Component(): any;
+      render(<Component />);
+      const child = createEventTarget(childRef.current);
+      act(() => {
+        child.click();
+      });
+      expect(childListener).toBeCalledTimes(1);
+      expect(targetListener).toBeCalledTimes(0);
+    });
+    test('stopImmediatePropagation works as expected', () => {
+      const firstListener = jest.fn(e => {
+        e.stopImmediatePropagation();
+      });
+      const secondListener = jest.fn();
+      const targetRef = React.createRef();
+      declare function Component(): any;
+      render(<Component />);
+      const target = createEventTarget(targetRef.current);
+      act(() => {
+        target.click();
+      });
+      expect(firstListener).toBeCalledTimes(1);
+      expect(secondListener).toBeCalledTimes(0);
+    });
+  });
+});
\ No newline at end of file
diff --git a/node_modules/react-native-web/dist/modules/addEventListener/__tests__/index-test.node.js.flow b/node_modules/react-native-web/dist/modules/addEventListener/__tests__/index-test.node.js.flow
new file mode 100644
index 0000000..c1805b7
--- /dev/null
+++ b/node_modules/react-native-web/dist/modules/addEventListener/__tests__/index-test.node.js.flow
@@ -0,0 +1,21 @@
+/**
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @flow strict-local
+ */
+
+import * as React from 'react';
+import * as ReactDOMServer from 'react-dom/server';
+import { addEventListener } from '..';
+describe('addEventListener', () => {
+  test('can render correctly using ReactDOMServer', () => {
+    const listener = jest.fn();
+    const targetRef = React.createRef();
+    declare function Component(): any;
+    const output = ReactDOMServer.renderToString(<Component />);
+    expect(output).toBe('<div></div>');
+  });
+});
\ No newline at end of file
diff --git a/node_modules/react-native-web/dist/modules/useEvent/__tests__/index-test.js.flow b/node_modules/react-native-web/dist/modules/useEvent/__tests__/index-test.js.flow
new file mode 100644
index 0000000..9b57364
--- /dev/null
+++ b/node_modules/react-native-web/dist/modules/useEvent/__tests__/index-test.js.flow
@@ -0,0 +1,247 @@
+/**
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @flow strict-local
+ */
+
+import * as React from 'react';
+import { act, render } from '@testing-library/react';
+import { createEventTarget } from 'dom-event-testing-library';
+import useEvent from '..';
+describe('use-event', () => {
+  describe('setListener()', () => {
+    test('event dispatched on target', () => {
+      const listener = jest.fn();
+      const targetRef = React.createRef();
+      declare function Component(): any;
+      render(<Component />);
+      const target = createEventTarget(targetRef.current);
+      act(() => {
+        target.click();
+      });
+      expect(listener).toBeCalledTimes(1);
+    });
+    test('event dispatched on parent', () => {
+      const listener = jest.fn();
+      const listenerCapture = jest.fn();
+      const targetRef = React.createRef();
+      const parentRef = React.createRef();
+      declare function Component(): any;
+      render(<Component />);
+      const parent = createEventTarget(parentRef.current);
+      act(() => {
+        parent.click();
+      });
+      expect(listener).toBeCalledTimes(0);
+      expect(listenerCapture).toBeCalledTimes(0);
+    });
+    test('event dispatched on child', () => {
+      const log = [];
+      const listener = jest.fn(() => {
+        log.push('bubble');
+      });
+      const listenerCapture = jest.fn(() => {
+        log.push('capture');
+      });
+      const targetRef = React.createRef();
+      const childRef = React.createRef();
+      declare function Component(): any;
+      render(<Component />);
+      const child = createEventTarget(childRef.current);
+      act(() => {
+        child.click();
+      });
+      expect(listenerCapture).toBeCalledTimes(1);
+      expect(listener).toBeCalledTimes(1);
+      expect(log).toEqual(['capture', 'bubble']);
+    });
+    test('event dispatched on text node', () => {
+      const listener = jest.fn();
+      const targetRef = React.createRef();
+      const childRef = React.createRef();
+      declare function Component(): any;
+      render(<Component />);
+      const text = createEventTarget(childRef.current.firstChild);
+      act(() => {
+        text.click();
+      });
+      expect(listener).toBeCalledTimes(1);
+    });
+    test('listener can be attached to document ', () => {
+      const listener = jest.fn();
+      const targetRef = React.createRef();
+      declare function Component(arg0: any): any;
+      render(<Component target={document} />);
+      const target = createEventTarget(targetRef.current);
+      act(() => {
+        target.click();
+      });
+      expect(listener).toBeCalledTimes(1);
+    });
+    test('listener can be attached to window ', () => {
+      const listener = jest.fn();
+      const targetRef = React.createRef();
+      declare function Component(arg0: any): any;
+      render(<Component target={window} />);
+      const target = createEventTarget(targetRef.current);
+      act(() => {
+        target.click();
+      });
+      expect(listener).toBeCalledTimes(1);
+    });
+    test('listener is replaceable', () => {
+      const listener = jest.fn();
+      const listenerAlt = jest.fn();
+      const targetRef = React.createRef();
+      declare function Component(arg0: any): any;
+      const {
+        rerender
+      } = render(<Component onClick={listener} />);
+      const target = createEventTarget(targetRef.current);
+      act(() => {
+        target.click();
+      });
+      expect(listener).toBeCalledTimes(1);
+      rerender(<Component onClick={listenerAlt} />);
+      act(() => {
+        target.click();
+      });
+      expect(listener).toBeCalledTimes(1);
+      expect(listenerAlt).toBeCalledTimes(1);
+    });
+    test('listener is removed when value is null', () => {
+      const listener = jest.fn();
+      const targetRef = React.createRef();
+      declare function Component(arg0: any): any;
+      const {
+        unmount
+      } = render(<Component off={false} />);
+      const target = createEventTarget(targetRef.current);
+      act(() => {
+        target.click();
+      });
+      expect(listener).toBeCalledTimes(1);
+
+      // this should unset the listener
+      unmount();
+      listener.mockClear();
+      act(() => {
+        target.click();
+      });
+      expect(listener).toBeCalledTimes(0);
+    });
+    test('custom event dispatched on target', () => {
+      const listener = jest.fn();
+      const targetRef = React.createRef();
+      declare function Component(): any;
+      render(<Component />);
+      act(() => {
+        const event = new CustomEvent('magic-event', {
+          bubbles: true
+        });
+        targetRef.current.dispatchEvent(event);
+      });
+      expect(listener).toBeCalledTimes(1);
+    });
+    test('listeners can be set on multiple targets simultaneously', () => {
+      const log = [];
+      const targetRef = React.createRef();
+      const parentRef = React.createRef();
+      const childRef = React.createRef();
+      const listener = jest.fn(e => {
+        log.push(['bubble', e.currentTarget.id]);
+      });
+      const listenerCapture = jest.fn(e => {
+        log.push(['capture', e.currentTarget.id]);
+      });
+      declare function Component(): any;
+      render(<Component />);
+      const child = createEventTarget(childRef.current);
+      act(() => {
+        child.click();
+      });
+      expect(listenerCapture).toBeCalledTimes(2);
+      expect(listener).toBeCalledTimes(2);
+      expect(log).toEqual([['capture', 'parent'], ['capture', 'target'], ['bubble', 'target'], ['bubble', 'parent']]);
+    });
+    test('listeners are specific to each event handle', () => {
+      const log = [];
+      const targetRef = React.createRef();
+      const childRef = React.createRef();
+      const listener = jest.fn(e => {
+        log.push(['bubble', 'target']);
+      });
+      const listenerAlt = jest.fn(e => {
+        log.push(['bubble', 'target-alt']);
+      });
+      const listenerCapture = jest.fn(e => {
+        log.push(['capture', 'target']);
+      });
+      const listenerCaptureAlt = jest.fn(e => {
+        log.push(['capture', 'target-alt']);
+      });
+      declare function Component(): any;
+      render(<Component />);
+      const child = createEventTarget(childRef.current);
+      act(() => {
+        child.click();
+      });
+      expect(listenerCapture).toBeCalledTimes(1);
+      expect(listenerCaptureAlt).toBeCalledTimes(1);
+      expect(listener).toBeCalledTimes(1);
+      expect(listenerAlt).toBeCalledTimes(1);
+      expect(log).toEqual([['capture', 'target'], ['capture', 'target-alt'], ['bubble', 'target'], ['bubble', 'target-alt']]);
+    });
+  });
+  describe('cleanup', () => {
+    test('removes all listeners for given event type from targets', () => {
+      const clickListener = jest.fn();
+      declare function Component(): any;
+      const {
+        unmount
+      } = render(<Component />);
+      unmount();
+      const target = createEventTarget(document);
+      act(() => {
+        target.click();
+      });
+      expect(clickListener).toBeCalledTimes(0);
+    });
+  });
+  describe('stopPropagation and stopImmediatePropagation', () => {
+    test('stopPropagation works as expected', () => {
+      const childListener = jest.fn(e => {
+        e.stopPropagation();
+      });
+      const targetListener = jest.fn();
+      const targetRef = React.createRef();
+      const childRef = React.createRef();
+      declare function Component(): any;
+      render(<Component />);
+      const child = createEventTarget(childRef.current);
+      act(() => {
+        child.click();
+      });
+      expect(childListener).toBeCalledTimes(1);
+      expect(targetListener).toBeCalledTimes(0);
+    });
+    test('stopImmediatePropagation works as expected', () => {
+      const firstListener = jest.fn(e => {
+        e.stopImmediatePropagation();
+      });
+      const secondListener = jest.fn();
+      const targetRef = React.createRef();
+      declare function Component(): any;
+      render(<Component />);
+      const target = createEventTarget(targetRef.current);
+      act(() => {
+        target.click();
+      });
+      expect(firstListener).toBeCalledTimes(1);
+      expect(secondListener).toBeCalledTimes(0);
+    });
+  });
+});
\ No newline at end of file
diff --git a/node_modules/react-native-web/dist/modules/useStable/__tests__/index-test.js.flow b/node_modules/react-native-web/dist/modules/useStable/__tests__/index-test.js.flow
new file mode 100644
index 0000000..49edfc6
--- /dev/null
+++ b/node_modules/react-native-web/dist/modules/useStable/__tests__/index-test.js.flow
@@ -0,0 +1,54 @@
+/**
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @flow
+ */
+
+import * as React from 'react';
+import { render } from '@testing-library/react';
+import useStable from '..';
+describe('useStable', () => {
+  let spy = {};
+  declare var TestComponent: (arg0: any) => React.Node;
+  beforeEach(() => {
+    spy = {};
+  });
+  test('correctly sets the initial value', () => {
+    declare var initialValueCallback: () => any;
+    render(<TestComponent initialValueCallback={initialValueCallback} />);
+    expect(spy.value).toBe(5);
+  });
+  test('does not change the value', () => {
+    let counter = 0;
+    declare var initialValueCallback: () => any;
+    const {
+      rerender
+    } = render(<TestComponent initialValueCallback={initialValueCallback} />);
+    expect(spy.value).toBe(0);
+    rerender(<TestComponent initialValueCallback={initialValueCallback} />);
+    expect(spy.value).toBe(0);
+  });
+  test('only calls the callback once', () => {
+    let counter = 0;
+    declare var initialValueCallback: () => any;
+    const {
+      rerender
+    } = render(<TestComponent initialValueCallback={initialValueCallback} />);
+    expect(counter).toBe(1);
+    rerender(<TestComponent initialValueCallback={initialValueCallback} />);
+    expect(counter).toBe(1);
+  });
+  test('does not change the value if the callback initially returns null', () => {
+    let counter = 0;
+    declare var initialValueCallback: () => any;
+    const {
+      rerender
+    } = render(<TestComponent initialValueCallback={initialValueCallback} />);
+    expect(spy.value).toBe(null);
+    rerender(<TestComponent initialValueCallback={initialValueCallback} />);
+    expect(spy.value).toBe(null);
+  });
+});
\ No newline at end of file
diff --git a/node_modules/react-native-web/dist/vendor/react-native/VirtualizedList/index.js b/node_modules/react-native-web/dist/vendor/react-native/VirtualizedList/index.js
index 1f52b73..d0d37e0 100644
--- a/node_modules/react-native-web/dist/vendor/react-native/VirtualizedList/index.js
+++ b/node_modules/react-native-web/dist/vendor/react-native/VirtualizedList/index.js
@@ -15,7 +15,6 @@ import RefreshControl from '../../../exports/RefreshControl';
 import ScrollView from '../../../exports/ScrollView';
 import View from '../../../exports/View';
 import StyleSheet from '../../../exports/StyleSheet';
-import findNodeHandle from '../../../exports/findNodeHandle';
 import Batchinator from '../Batchinator';
 import clamp from '../Utilities/clamp';
 import infoLog from '../infoLog';
@@ -582,9 +581,7 @@ class VirtualizedList extends StateSafePureComponent {
         };
       });
     };
-    this._createViewToken = (index, isViewable, props
-    // $FlowFixMe[missing-local-annot]
-    ) => {
+    this._createViewToken = (index, isViewable, props) => {
       var data = props.data,
         getItem = props.getItem;
       var item = getItem(data, index);
@@ -982,9 +979,7 @@ class VirtualizedList extends StateSafePureComponent {
     var nestedContext = this.context;
     return !!(nestedContext && !!nestedContext.horizontal === horizontalOrDefault(this.props.horizontal));
   }
-  _keyExtractor(item, index, props
-  // $FlowFixMe[missing-local-annot]
-  ) {
+  _keyExtractor(item, index, props) {
     if (props.keyExtractor != null) {
       return props.keyExtractor(item, index);
     }
diff --git a/node_modules/react-native-web/dist/vendor/react-native/VirtualizedList/index.js.flow b/node_modules/react-native-web/dist/vendor/react-native/VirtualizedList/index.js.flow
index d94e43c..f347eed 100644
--- a/node_modules/react-native-web/dist/vendor/react-native/VirtualizedList/index.js.flow
+++ b/node_modules/react-native-web/dist/vendor/react-native/VirtualizedList/index.js.flow
@@ -16,7 +16,6 @@ import RefreshControl from '../../../exports/RefreshControl';
 import ScrollView from '../../../exports/ScrollView';
 import View, { type ViewProps } from '../../../exports/View';
 import StyleSheet from '../../../exports/StyleSheet';
-import findNodeHandle from '../../../exports/findNodeHandle';
 import Batchinator from '../Batchinator';
 import clamp from '../Utilities/clamp';
 import infoLog from '../infoLog';
